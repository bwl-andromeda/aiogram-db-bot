import asyncpg
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from src.kb import start_kb
from src.states import ReplenishmentStates, WasteStates, CategoryStates
from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)

router = Router(name=__name__)


@router.message(CommandStart())
async def start_handler(message: Message):
    start_message = f"–ü—Ä–∏–≤–µ—Ç, *{
        message.from_user.full_name}*\n–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–¥–µ–ª–∞–Ω –∫–∞–∫ –∫—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞\n\
–Ø –¥—É–º–∞—é —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª :)"
    await message.answer(start_message, reply_markup=await start_kb())


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message, db_pool: asyncpg.Pool):
    async with db_pool.acquire() as conn:
        user = await conn.fetchrow(
            "SELECT full_name, balance FROM users WHERE user_id = $1",
            message.from_user.id,
        )
        if user:
            await message.reply(
                f"–ò–º—è: {user['full_name']}\n–ë–∞–ª–∞–Ω—Å: {int(user['balance'])} —Ä—É–±.",
                reply_markup=await start_kb(),
            )


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message, db_pool: asyncpg.Pool):
    async with db_pool.acquire() as conn:
        statistics = await conn.fetch(
            """
            SELECT c.name AS category_name, SUM(t.amount) AS total_amount
            FROM transactions t
            JOIN categories c ON t.category_id = c.id
            WHERE t.user_id = $1 AND t.is_income = FALSE
            GROUP BY c.name
            """,
            message.from_user.id,
        )

        if statistics:
            stats_message = "\n".join(
                [
                    f"{stat['category_name']}: {stat['total_amount']} —Ä—É–±."
                    for stat in statistics
                ]
            )
            await message.reply(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ *—Ç—Ä–∞—Ç* –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n{stats_message}")
        else:
            await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞—Ç.")


@router.message(F.text == "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
async def start_replenishment(message: Message, state: FSMContext):
    await message.reply("*–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:*")
    await state.set_state(ReplenishmentStates.WAITING_FOR_AMOUNT)


@router.message(ReplenishmentStates.WAITING_FOR_AMOUNT)
async def process_replenishment(
    message: Message, state: FSMContext, db_pool: asyncpg.Pool
):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError("*–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!*")

        async with db_pool.acquire() as conn:
            await conn.execute(
                "UPDATE users SET balance = balance + $1 WHERE user_id = $2",
                amount,
                message.from_user.id,
            )
            await conn.execute(
                "INSERT INTO transactions (amount, user_id, is_income) VALUES ($1, $2, TRUE)",
                amount,
                message.from_user.id,
            )
            await message.reply(
                f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ *{amount}* —Ä—É–±.",
                reply_markup=await start_kb(),
            )
            await state.clear()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é* —Å—É–º–º—É.")


@router.message(F.text == "üí∏ –¢—Ä–∞—Ç–∞")
async def start_waste(message: Message, state: FSMContext):
    await message.reply("*–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã:*")
    await state.set_state(WasteStates.WAITING_FOR_AMOUNT)


@router.message(WasteStates.WAITING_FOR_AMOUNT)
async def process_waste_amount(
    message: Message, state: FSMContext, db_pool: asyncpg.Pool
):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        await state.update_data(amount=amount)

        async with db_pool.acquire() as conn:
            user = await conn.fetchrow(
                "SELECT user_id FROM users WHERE user_id = $1", message.from_user.id
            )
            if user:
                user_id = user["user_id"]
                categories = await conn.fetch(
                    "SELECT name FROM categories WHERE user_id = $1",
                    user_id,
                )
            else:
                categories = None

        if categories:
            list_category = [category["name"] for category in categories]
            kb_list = []
            for category in list_category:
                kb_list.append([KeyboardButton(text=category)])
                print(kb_list)

            kb = ReplyKeyboardMarkup(
                keyboard=kb_list, resize_keyboard=True, one_time_keyboard=True
            )
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞—Ç—ã:", reply_markup=kb)
            await state.set_state(WasteStates.WAITING_FOR_CATEGORY)
        else:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            await state.clear()
    except ValueError as e:
        print(e)
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")


@router.message(WasteStates.WAITING_FOR_CATEGORY)
async def process_waste_category(message: Message, state: FSMContext):
    category_name = message.text
    await state.update_data(
        category=category_name
    )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã:")
    await state.set_state(
        WasteStates.WAITING_FOR_DESCRIPTION
    )  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏—è


@router.message(WasteStates.WAITING_FOR_DESCRIPTION)
async def process_waste_description(
    message: Message, state: FSMContext, db_pool: asyncpg.Pool
):
    description = message.text
    data = await state.get_data()
    category_name = data["category"]
    amount = data["amount"]
    async with db_pool.acquire() as conn:
        category = await conn.fetchrow(
            "SELECT id FROM categories WHERE name = $1 AND user_id = $2",
            category_name,
            message.from_user.id,
        )
        if category:
            await conn.execute(
                "UPDATE users SET balance = balance - $1 WHERE user_id = $2",
                amount,
                message.from_user.id,
            )
            await conn.execute(
                "INSERT INTO transactions (amount, category_id, user_id, is_income, description) VALUES ($1, $2, $3, FALSE, $4)",
                amount,
                category["id"],
                message.from_user.id,
                description,
            )
            await message.reply(
                f"–¢—Ä–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} —Ä—É–±. –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º '{description}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞.",
                reply_markup=await start_kb(),
            )
        else:
            await message.reply("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    await state.clear()


@router.message(F.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def start_categories(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="show_categories"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category"
                )
            ],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


@router.callback_query(
    lambda c: c.data in ["show_categories", "add_category", "back_to_main"]
)
async def process_category_action(
    callback_query: CallbackQuery, state: FSMContext, db_pool: asyncpg.Pool
):
    await callback_query.answer()

    if callback_query.data == "show_categories":
        async with db_pool.acquire() as conn:
            categories = await conn.fetch(
                "SELECT name FROM categories WHERE user_id = $1",
                callback_query.from_user.id,
            )

        if categories:
            category_list = "\n".join(
                [f"- {category['name']}" for category in categories]
            )
            await callback_query.message.reply(f"–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{category_list}")
        else:
            await callback_query.message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

    elif callback_query.data == "add_category":
        await callback_query.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await state.set_state(CategoryStates.WAITING_FOR_NEW_CATEGORY)

    elif callback_query.data == "back_to_main":
        await callback_query.message.reply(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=await start_kb()
        )

    # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    await callback_query.message.edit_reply_markup(reply_markup=None)


@router.message(CategoryStates.WAITING_FOR_NEW_CATEGORY)
async def add_new_category(message: Message, state: FSMContext, db_pool: asyncpg.Pool):
    new_category = message.text

    async with db_pool.acquire() as conn:
        existing_category = await conn.fetchrow(
            "SELECT id FROM categories WHERE name = $1 AND user_id = $2",
            new_category,
            message.from_user.id,
        )

        if existing_category:
            await message.reply("–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            await conn.execute(
                "INSERT INTO categories (name, user_id) VALUES ($1, $2)",
                new_category,
                message.from_user.id,
            )
            await message.reply(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{new_category}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="show_categories"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category"
                )
            ],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
    )
    await message.reply("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=kb)
